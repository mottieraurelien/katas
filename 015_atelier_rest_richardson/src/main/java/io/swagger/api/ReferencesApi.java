/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.carbonit.gpe.workshops.library_api.service.hateoas.impl.EmbeddedReference;
import io.swagger.model.Error;
import io.swagger.model.Reference;
import io.swagger.model.ReferencePartial;
import io.swagger.annotations.*;
import org.springframework.hateoas.ResourceSupport;
import org.springframework.hateoas.Resources;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-02-26T18:01:48.763Z[GMT]")
@Api(value = "references", description = "the references API")
public interface ReferencesApi {

    @ApiOperation(value = "Borrow or return a reference", nickname = "borrowOrReturnReference", notes = "", response = Reference.class, authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "updated reference", response = Reference.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/references/{referenceId}/borrowed",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Reference> borrowOrReturnReference(@ApiParam(value = "The id of the targeted reference.",required=true) @PathVariable("referenceId") String referenceId,@ApiParam(value = ""  )  @Valid @RequestBody Boolean body);


    @ApiOperation(value = "Add a reference", nickname = "createReference", notes = "", response = Reference.class, authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "created Reference", response = Reference.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/references",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Reference> createReference(@ApiParam(value = ""  )  @Valid @RequestBody ReferencePartial body);


    @ApiOperation(value = "Delete a reference", nickname = "deleteReference", notes = "", response = ResourceSupport.class, authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Delete was successfull"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/references/{referenceId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReference(@ApiParam(value = "The id of the targeted reference.",required=true) @PathVariable("referenceId") String referenceId);


    @ApiOperation(value = "Search a reference", nickname = "searchReference", notes = "", response = Reference.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The list of all matching references", response = Reference.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/references",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resources<EmbeddedReference>> searchReference(@ApiParam(value = "the search query") @Valid @RequestParam(value = "q", required = false) String q);


    @ApiOperation(value = "Read a reference", nickname = "showReference", notes = "", response = Reference.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected reference", response = Reference.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/references/{referenceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Reference> showReference(@ApiParam(value = "The id of the targeted reference.",required=true) @PathVariable("referenceId") String referenceId);


    @ApiOperation(value = "Update a reference", nickname = "updateReference", notes = "", response = Reference.class, authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "updated reference", response = Reference.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/references/{referenceId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Reference> updateReference(@ApiParam(value = "The id of the targeted reference.",required=true) @PathVariable("referenceId") String referenceId,@ApiParam(value = ""  )  @Valid @RequestBody Reference body);

}
