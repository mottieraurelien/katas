/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.JWT;
import io.swagger.model.User;
import io.swagger.model.UserPartial;
import io.swagger.annotations.*;
import org.springframework.hateoas.ResourceSupport;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-02-26T18:01:48.763Z[GMT]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Authenticate a user", nickname = "authUser", notes = "", response = JWT.class, authorizations = {
        @Authorization(value = "basic_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "JWT for subsequent requests of user", response = JWT.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/users/token",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<JWT> authUser();


    @ApiOperation(value = "Register as a Reader", nickname = "createUser", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "created user", response = User.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> createUser(@ApiParam(value = ""  )  @Valid @RequestBody UserPartial body);


    @ApiOperation(value = "Delete a user", nickname = "deleteUser", response = ResourceSupport.class, notes = "", authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Delete was successfull"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResourceSupport> deleteUser(@ApiParam(value = "The id of the targeted user.",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "Consult a User Profile", nickname = "showUser", notes = "", response = User.class, authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected User", response = User.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> showUser(@ApiParam(value = "The id of the targeted user.",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "Update a User", nickname = "updateUser", notes = "", response = User.class, authorizations = {
        @Authorization(value = "jwt_auth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "updated user", response = User.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<User> updateUser(@ApiParam(value = "The id of the targeted user.",required=true) @PathVariable("userId") String userId,@ApiParam(value = ""  )  @Valid @RequestBody UserPartial body);

}
