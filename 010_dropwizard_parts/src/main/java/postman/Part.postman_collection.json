{
	"info": {
		"name": "Part",
		"_postman_id": "54ff2321-104d-4a15-bd53-82344660e256",
		"description": "Collection Postman pour tester l'entité Part.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Création d'une pièce sans name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3bcff634-055c-4490-8521-34ceb6b89f48",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a échouée.\", function() {",
							"    ",
							"    // Nous attendons un 422 en retour du POST (entité ne pouvant pas être parsée correctement) :",
							"    pm.response.to.have.status(422);",
							"    ",
							"});",
							"    ",
							"// 2 - Vérification de l'erreur retourné par le microservice :",
							"pm.test(\"L'opération a échoué pour la raison attendue (le champs name doit être spécifié).\", function() {",
							"    ",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"    ",
							"    // Nous vérifions le contenu de l'erreur :",
							"    pm.expect(responseJson.errors[0]).to.eql(\"name ne peut pas être vide\");",
							"    ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\" : \"part_code_{{$guid}}\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						""
					]
				},
				"description": "Tentative de création d'une pièce sans name au moyen d'une requête POST."
			},
			"response": []
		},
		{
			"name": "Création d'une pièce sans code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d26d49f-f32b-48eb-88c8-f16c266987f7",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a échouée.\", function() {",
							"    ",
							"    // Nous attendons un 422 en retour du POST (entité ne pouvant pas être parsée correctement) :",
							"    pm.response.to.have.status(422);",
							"    ",
							"});",
							"    ",
							"// 2 - Vérification de l'erreur retourné par le microservice :",
							"pm.test(\"L'opération a échoué pour la raison attendue (le champs code doit être spécifié).\", function() {",
							"    ",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"    ",
							"    // Nous vérifions le contenu de l'erreur :",
							"    pm.expect(responseJson.errors[0]).to.eql(\"code ne peut pas être vide\");",
							"    ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_{{$guid}}\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						""
					]
				},
				"description": "Tentative de création d'une pièce sans code au moyen d'une requête POST."
			},
			"response": []
		},
		{
			"name": "Création d'une première pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe4e547b-ebd3-484e-8343-f80b9ab2115b",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du POST :",
							"    pm.response.to.have.status(200);",
							"    ",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"    ",
							"    // Stockage des données enregistrées de la pièce créée en variables d'environnement :",
							"    pm.globals.set(\"idPart1\", responseJson.data.id);",
							"    pm.globals.set(\"codePart1\", responseJson.data.code);",
							"    pm.globals.set(\"namePart1\", responseJson.data.name);",
							"    ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_{{$guid}}\",\n\t\"code\" : \"part_code_{{$guid}}\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						""
					]
				},
				"description": "Création d'une première pièce au moyen d'une requête POST."
			},
			"response": []
		},
		{
			"name": "Création d'une deuxième pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "58b92295-0166-4ca0-85d2-dd84dcd8dac2",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du POST :",
							"    pm.response.to.have.status(200);",
							"    ",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"    ",
							"    // Stockage des données enregistrées de la pièce créée en variables d'environnement :",
							"    pm.globals.set(\"idPart2\", responseJson.data.id);",
							"    pm.globals.set(\"codePart2\", responseJson.data.code);",
							"    pm.globals.set(\"namePart2\", responseJson.data.name);",
							"    ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_{{$guid}}\",\n\t\"code\" : \"part_code_{{$guid}}\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						""
					]
				},
				"description": "Création d'une deuxième pièce au moyen d'une requête POST."
			},
			"response": []
		},
		{
			"name": "Création d'une troisième pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2cac57c-158c-45e8-9ff9-05dcef26120d",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du POST :",
							"    pm.response.to.have.status(200);",
							"    ",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"    ",
							"    // Stockage des données enregistrées de la pièce créée en variables d'environnement :",
							"    pm.globals.set(\"idPart3\", responseJson.data.id);",
							"    pm.globals.set(\"codePart3\", responseJson.data.code);",
							"    pm.globals.set(\"namePart3\", responseJson.data.name);",
							"    ",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ddd324c4-7157-4d41-a8e3-565bf81b7b6f",
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_{{$guid}}\",\n\t\"code\" : \"part_code_{{$guid}}\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						""
					]
				},
				"description": "Création d'une première pièce au moyen d'une requête POST."
			},
			"response": []
		},
		{
			"name": "Récupération d'une pièce inexistante",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83ab42b1-09ae-4352-b0fc-d4158f281734",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a échouée.\", function() {",
							"    ",
							"    // Nous attendons un 404 en retour du GET :",
							"    pm.response.to.have.status(404);",
							"    ",
							"});",
							"",
							"// 2 - Vérification du contenu de la réponse :",
							"pm.test(\"L'opération a échoué pour la raison attendue (la pièce ayant l'identifiant -1 n'existe pas).\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons uniquement récupéré la deuxième pièce :",
							"    pm.expect(responseJson.code).to.eql(404);",
							"    pm.expect(responseJson.message).to.eql(\"Part id -1 not found.\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_3\",\n\t\"code\" : \"part_code_3\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "-1"
						}
					]
				},
				"description": "Tentative de récupération d'une pièce inexistante au moyen d'une requête GET."
			},
			"response": []
		},
		{
			"name": "Récupération de la deuxième pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1be63535-43e9-4a6c-ba45-49d13719e30d",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du GET :",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"// 2 - Vérification du contenu de la réponse :",
							"pm.test(\"La deuxième pièce a bien été récupérée.\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons uniquement récupéré la deuxième pièce :",
							"    pm.expect(responseJson.data.id).to.eql(pm.globals.get(\"idPart2\"));",
							"    pm.expect(responseJson.data.code).to.eql(pm.globals.get(\"codePart2\"));",
							"    pm.expect(responseJson.data.name).to.eql(pm.globals.get(\"namePart2\"));",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_3\",\n\t\"code\" : \"part_code_3\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idPart2}}"
						}
					]
				},
				"description": "Récupération de la seconde pièce au moyen d'une requête GET."
			},
			"response": []
		},
		{
			"name": "Récupération des pièces",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f11596e3-0ff6-4ba8-80ed-9b6ec3d7f59d",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du GET :",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"// 2 - Vérification du contenu de la réponse :",
							"pm.test(\"Les trois bonnes pièces ont bien été récupérées.\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons récupéré les trois pièces en question :",
							"    pm.expect(responseJson.data.length).to.eql(3);",
							"    ",
							"    // Vérification en détail des trois pièces récupérées :",
							"    pm.expect(responseJson.data[0].id).to.eql(pm.globals.get(\"idPart1\"));",
							"    pm.expect(responseJson.data[0].code).to.eql(pm.globals.get(\"codePart1\"));",
							"    pm.expect(responseJson.data[0].name).to.eql(pm.globals.get(\"namePart1\"));",
							"    pm.expect(responseJson.data[1].id).to.eql(pm.globals.get(\"idPart2\"));",
							"    pm.expect(responseJson.data[1].code).to.eql(pm.globals.get(\"codePart2\"));",
							"    pm.expect(responseJson.data[1].name).to.eql(pm.globals.get(\"namePart2\"));",
							"    pm.expect(responseJson.data[2].id).to.eql(pm.globals.get(\"idPart3\"));",
							"    pm.expect(responseJson.data[2].code).to.eql(pm.globals.get(\"codePart3\"));",
							"    pm.expect(responseJson.data[2].name).to.eql(pm.globals.get(\"namePart3\"));",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						""
					]
				},
				"description": "Récupération de toutes les pièces au moyen d'une requête GET."
			},
			"response": []
		},
		{
			"name": "Modification d'une pièce inexistante",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "01e9c7bc-b359-4cf5-a231-bef9d192541b",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a échouée.\", function() {",
							"    ",
							"    // Nous attendons un 404 en retour du GET :",
							"    pm.response.to.have.status(404);",
							"    ",
							"});",
							"",
							"// 2 - Vérification du contenu de la réponse :",
							"pm.test(\"L'opération a échoué pour la raison attendue (la pièce ayant l'identifiant -1 n'existe pas).\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons uniquement récupéré la deuxième pièce :",
							"    pm.expect(responseJson.code).to.eql(404);",
							"    pm.expect(responseJson.message).to.eql(\"Part id -1 not found.\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_-1\",\n\t\"code\" : \"part_name_-1\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "-1"
						}
					]
				},
				"description": "Tentative de modification d'une pièce inexistante au moyen d'une requête PUT."
			},
			"response": []
		},
		{
			"name": "Modification de la deuxième pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4011c1d-b9b1-4608-aad0-ab4d22100b64",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du DELETE :",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"// 2 - Vérification du contenu de la réponse :",
							"pm.test(\"La deuxième pièce a bien été supprimée.\", function() {",
							"",
							"    // Récupération du body de la requête sous forme d'un flux JSON :",
							"    var requestJson = JSON.parse(pm.request.body.raw);",
							"    ",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons uniquement modifié la deuxième pièce :",
							"    pm.expect(responseJson.data.id).to.eql(pm.globals.get(\"idPart2\"));",
							"    pm.expect(responseJson.data.code).to.eql(requestJson.code);",
							"    pm.expect(responseJson.data.name).to.eql(requestJson.name);",
							"    ",
							"    // Stockage des données enregistrées de la pièce modifiée en variables d'environnement :",
							"    pm.globals.set(\"codePart2\", responseJson.data.code);",
							"    pm.globals.set(\"namePart2\", responseJson.data.name);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\" : \"part_name_2\",\n\t\"code\" : \"part_code_2\"\n}"
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idPart2}}"
						}
					]
				},
				"description": "Modification de la deuxième pièce au moyen d'une requête PUT."
			},
			"response": []
		},
		{
			"name": "Suppression d'une pièce inexistante",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b100c2a0-5a2a-4dc2-b0ba-24552eeed643",
						"type": "text/javascript",
						"exec": [
							"// 1 - Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a échouée.\", function() {",
							"    ",
							"    // Nous attendons un 404 en retour du GET :",
							"    pm.response.to.have.status(404);",
							"    ",
							"});",
							"",
							"// 2 - Vérification du contenu de la réponse :",
							"pm.test(\"L'opération a échoué pour la raison attendue (la pièce ayant l'identifiant -1 n'existe pas).\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons uniquement récupéré la deuxième pièce :",
							"    pm.expect(responseJson.code).to.eql(404);",
							"    pm.expect(responseJson.message).to.eql(\"Part id -1 not found.\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "-1"
						}
					]
				},
				"description": "Tentative de suppression d'une pièce inexistante au moyen d'une requête DELETE."
			},
			"response": []
		},
		{
			"name": "Suppression de la première pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cf8a09a-0939-43ef-8269-a8f50568aa0f",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du DELETE :",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"// Vérification du contenu de la réponse :",
							"pm.test(\"La première pièce a bien été supprimée..\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons bien supprimé la première pièce :",
							"    pm.expect(responseJson.data).to.eql(\"Success...\");",
							"    ",
							"    // Nous supprimons des variables d'environnement :",
							"    pm.globals.unset(\"idPart1\");",
							"    pm.globals.unset(\"codePart1\");",
							"    pm.globals.unset(\"namePart1\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idPart1}}"
						}
					]
				},
				"description": "Suppression de la première pièce au moyen d'une requête DELETE."
			},
			"response": []
		},
		{
			"name": "Suppression de la deuxième pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d087ed43-3c7c-4b80-8817-e71b59db0b77",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du DELETE :",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"// Vérification du contenu de la réponse :",
							"pm.test(\"La deuxième pièce a bien été supprimée..\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons bien supprimé la deuxième pièce :",
							"    pm.expect(responseJson.data).to.eql(\"Success...\");",
							"    ",
							"    // Nous supprimons des variables d'environnement :",
							"    pm.globals.unset(\"idPart2\");",
							"    pm.globals.unset(\"codePart2\");",
							"    pm.globals.unset(\"namePart2\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idPart2}}"
						}
					]
				},
				"description": "Suppression de la deuxième pièce au moyen d'une requête DELETE."
			},
			"response": []
		},
		{
			"name": "Suppression de la troisième pièce",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b0dc49d-86c5-428b-86ee-d7b595023d2a",
						"type": "text/javascript",
						"exec": [
							"// Vérification du code HTTP retourné par le microservice :",
							"pm.test(\"L'opération a été réalisée avec succès.\", function() {",
							"    ",
							"    // Nous attendons un 200 en retour du DELETE :",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"// Vérification du contenu de la réponse :",
							"pm.test(\"La troisième pièce a bien été supprimée..\", function() {",
							"",
							"    // Récupération du body de la réponse sous forme d'un flux JSON :",
							"    var responseJson = pm.response.json();",
							"",
							"    // Vérification que nous avons bien supprimé la troisième pièce :",
							"    pm.expect(responseJson.data).to.eql(\"Success...\");",
							"    ",
							"    // Nous supprimons des variables d'environnement :",
							"    pm.globals.unset(\"idPart3\");",
							"    pm.globals.unset(\"codePart3\");",
							"    pm.globals.unset(\"namePart3\");",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "test_token",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{domain}}/{{resource}}/:id",
					"protocol": "http",
					"host": [
						"{{domain}}"
					],
					"path": [
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{idPart3}}"
						}
					]
				},
				"description": "Suppression de la troisième pièce au moyen d'une requête DELETE."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "test_token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1db96707-0cda-48c4-b7ad-63fe645a95ac",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "49a030be-8ee2-4569-8ecb-8f00c13cbf9e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "80fc03c1-a6de-4a92-880d-b5cc6f249e53",
			"key": "resource",
			"value": "parts",
			"type": "text",
			"description": ""
		}
	]
}